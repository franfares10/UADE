{
    "swagger": "2.0",
    "info": {
      "description": "Swagger Integración de Aplicaciones 2021",
      "version": "1.0.0",
      "title": "Swagger Integración de Aplicaciones 2021"
    },
    "host": "singlesignonbackend.herokuapp.com",
    "basePath": "/api",
    "tags": [
      {
        "name": "Single Sign On Backend",
        "description": "Operations about sso tokens",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      }
    ],
    "schemes": ["https"],
    "paths": {
      "/users/register": {
        "post": {
          "description": "Creates a new user with the specific tenant from the request",
          "tags": ["Registrar usuarios en tenants"],
          "summary": "Registra un usuario en un tenant específico según el Request.",
          "operationId": "registerUser",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "UserTenantRegister",
              "description": "User object that needs to be registered in the DataBase",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserTenant"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "User Registered Successfully",
              "schema": { "$ref": "#/definitions/UserRegisteredResponse" }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeneralError"
                }
              }
            }
          },
          "security": [
            {
              "tenant_auth": ["write:UserTenant"]
            }
          ]
        }
      },
      "/users/login": {
        "post": {
          "tags": ["Login de usuario en tenant específico"],
          "summary": "Get JWT Token from a Valid User",
          "description": "A status 200 with a JWT will be returned when this endpoint is called",
          "operationId": "externalLogin",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "UserRequestLogin",
              "description": "User object that needs to be verified if exists or not",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UserRequestLogin"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Operation",
              "schema": {
                "$ref": "#/definitions/UserVerifiedResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/ErrorBusiness"
              }
            }
          },
          "security": [
            {
              "tenant_auth": ["read:UserRequestLogin"]
            }
          ]
        }
      },
      "/claims/claim": {
        "post": {
          "tags": ["Asociación de claim para tenant"],
          "summary": "Get JWT Token from a Valid User",
          "description": "A status 200 with a JWT will be returned when this endpoint is called",
          "operationId": "externalLogin",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "ClaimRequest",
              "description": "Claim Request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ClaimRequest"
              }
            }
          ],
          "responses": {
            "204": {},
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/ErrorBusiness"
              }
            }
          }
        },
        "delete": {
          "tags": ["Delete de claim especifico para usuario"],
          "summary": "Get JWT Token from a Valid User",
          "description": "A status 200 with a JWT will be returned when this endpoint is called",
          "operationId": "externalLogin",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "ClaimRequest",
              "description": "Claim Request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ClaimRequest"
              }
            }
          ],
          "responses": {
            "204": {},
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/ErrorBusiness"
              }
            }
          }
        }
      },
      "/claims/initialize": {
        "post": {
          "tags": ["Inicializar un nuevo claim en el tenant correspondiente"],
          "summary": "Inicializar un nuevo claim en el tenant correspondiente",
          "description": "A status 200 with a JWT will be returned when this endpoint is called",
          "operationId": "externalLogin",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "InitializeRequest",
              "description": "Initialize request",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "claim": { "type": "string" },
                  "jwtToken": { "type": "string" }
                }
              }
            }
          ],
          "responses": {
            "201": {
              "schema": {
                "type": "string"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/ErrorBusiness"
              }
            }
          }
        }
      },
      "/users/delete": {
        "delete": {
          "tags":["Eliminar un usuario a partir del tenant especifico"],
          "summary":"Endpoint para eliminar usuario",
          "consumes":["application/json"],
          "produces":["application/json"],
          "parameters":[{
            "in":"body",
            "name":"DeleteUserRequest",
            "required":true,
            "description":"Endpoint that returns if the user was succesfully deleted or not.",
            "schema":{
              "type":"object",
              "properties":{
                "email":{
                  "type":"string"
                },
                "tenant":{
                  "type":"string"
                },
                "jwtToken":{
                  "type":"string"
                }
              }
            }
          }],
          "responses":{
            "204":{},
            "401":{
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/ErrorBusiness"
              }
            }
          }
        }
      },
      "/claims/all": {
        "post": {
          "tags": ["Post para obtener todos los claims de un tenan"],
          "summary": "Get JWT Token from a Valid User",
          "description": "A status 200 with a JWT will be returned when this endpoint is called",
          "operationId": "externalLogin",
          "consumes": ["application/json"],
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "ClaimRequest",
              "description": "Claim Request",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "tenant": { "type": "string" },
                  "jwtToken": { "type": "string" }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "type": "object",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/ErrorBusiness"
              }
            }
          }
        }
      }
    },
    "securityDefinitions": {
      "tenant_auth": {
        "type": "oauth2",
        "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
        "flow": "implicit",
        "scopes": {
          "write:UserTenant": "write access to UserTenant",
          "read:UserRequestLogin": "read access to UserRequestLogin"
        }
      }
    },
    "definitions": {
      "UserTenant": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User name to be registered in the app"
          },
          "last_name": {
            "type": "string",
            "description": "User surname to be registered in the app"
          },
          "email": {
            "type": "string",
            "description": "Email of the user to be registered in the app."
          },
          "password": {
            "type": "string",
            "description": "User password for the app, it must be at least 8 chars"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant UUID to know where it should be registered"
          },
          "admin": {
            "type": "boolean",
            "description": "Whether the user is an admin or not"
          }
        }
      },
      "GeneralError": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Shows the error, and its type"
              },
              "param": {
                "type": "string",
                "description": "Show the errors name"
              },
              "location": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserRequestLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Users email to check whether if he is or not registered "
          },
          "password": {
            "type": "string",
            "description": "Users password to check with the email, if the credentials are ok"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant where the users want to authenticate with"
          }
        }
      },
      "ClaimRequest": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "tenant": {
                "type": "string"
              }
            }
          },
          "jwtToken": {
            "type": "string"
          },
          "claim": {
            "type": "string"
          }
        }
      },
      "ErrorBusiness": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Simple message showing why the error occurred"
          },
          "status": {
            "type": "string",
            "description": "HttpStatus to inform the error"
          }
        }
      },
      "UserVerifiedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Simple status showing transaction result"
          },
          "token": {
            "type": "string",
            "description": "JWT Token with the requirements needed to be validate with ClientApi"
          },
          "message": {
            "type": "string",
            "description": "Message informing if the transaction was ok or not"
          },
          "redirect": {
            "type": "string",
            "description": "RedirectUrl where the login should redirect if its a FrontendClientApp"
          }
        }
      },
      "UserRegisteredResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User registration email"
              },
              "tenant": {
                "type": "string",
                "description": "Tenant where the registration was realized"
              },
              "name": {
                "type": "string",
                "description": "User name for the app"
              },
              "last_name": {
                "type": "string",
                "description": "User last name for the app"
              },
              "admin": {
                "type": "string",
                "description": "If the user registered was an admin or not"
              },
              "_id": { "type": "string" },
              "__v": { "type": "string" }
            }
          },
          "message": {
            "type": "string",
            "description": "Simple message informing the result of the transaction"
          }
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  }